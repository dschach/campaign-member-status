# Unique name for this workflow
name: PR Validation
# Definition when the workflow should run
on:
  pull_request:
    types: [edited, opened, synchronize, reopened, review_requested]
    paths:
      - 'force-app/**'
      - 'triggerhandler/**'
      - 'unpackaged/**'
      - 'pmd/**'
      - 'config/**'
  workflow_dispatch:
# Jobs to be executed
jobs:
  scratch-org-test:
    runs-on: ubuntu-latest
    #Choose the docker image from which the container should be created
    container:
      image: salesforce/salesforcedx:latest-full
      options: --user 0:0
    if: ${{ github.actor != 'dependabot[bot]' }}
    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v3

      # Install PMD
      - name: 'Install Latest PMD'
        run: |
          PMD_VERSION=$(curl -s https://api.github.com/repos/pmd/pmd/releases/latest | grep '.tag_name' | sed 's:.*/::' | sed 's:",::')
          echo $PMD_VERSION
          wget https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-bin-$PMD_VERSION.zip
          unzip pmd-bin-$PMD_VERSION.zip -d ~
          mv ~/pmd-bin-$PMD_VERSION ~/pmd
          ~/pmd/bin/run.sh pmd --version

      # Run PMD scan
      - name: 'Run PMD scan'
        run: ~/pmd/bin/run.sh pmd -d force-app -R pmd/deployRules.xml -f text --cache .pmdCache --minimum-priority 2

      # Store secret for dev hub
      - name: 'Populate auth file with DEVHUB_SFDX_URL secret'
        shell: bash
        run: |
          echo ${{ secrets.DEVHUB_SFDX_URL}} > ./DEVHUB_SFDX_URL.txt
          secretFileSize=$(wc -c "./DEVHUB_SFDX_URL.txt" | awk '{print $1}')
          if [ $secretFileSize == 1 ]; then
              echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?";
              exit 1;
          fi

      # Authenticate dev hub
      - name: 'Authenticate Dev Hub'
        run: sfdx auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -a devhub -d

        # Add namespace to project config
      - name: Add namespace to project config
        run: |
          sed -i 's,"namespace": "","namespace": "",' sfdx-project.json

      # Create scratch org
      - name: 'Create scratch org'
        run: sf env create scratch --definition-file config/project-scratch-def.json --alias CampaignMemberStatus --no-namespace --set-default --duration-days 3 --track-source --wait 20

      # Deploy source to scratch org
      - name: 'Push source to scratch org'
        run: sfdx force:source:push

      # Assign permissionset
      - name: 'Assign permissionset to default user'
        run: sf org assign permset --name Campaign_Type_Member_Status_Admin --target-org CampaignMemberStatus

      # Run Apex tests in scratch org
      - name: 'Run Apex tests'
        run: sfdx force:apex:test:run -c -r human -l RunLocalTests -w 20 -d ./tests/apex

      # Upload code coverage to Codecov.io
      - name: 'Upload code coverage for Apex to Codecov.io'
        uses: codecov/codecov-action@v3
        with:
          flags: Apex

      # Housekeeping
      - name: 'Delete scratch org'
        if: always()
        run: sfdx force:org:delete -p -u CampaignMemberStatus

      # Remove namespace from project config
      - name: Remove namespace from project config
        run: |
          sed -i 's,"namespace": "","namespace": "",' sfdx-project.json
