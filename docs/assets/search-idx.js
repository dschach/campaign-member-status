export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Campaign Type Member Statuses Changelog This code was developed for Marketing Admins who want to automate and enforce the Campaign Member Status options for Campaigns of certain types. It was originally written by Sercante LLC . This application is designed to run on the Salesforce Platform Campaign Type Member Statuses A solution for Protected Campaign Member Statuses and step-by-step instructions for use. Originally written by Adam Erstelle Protected Campaign Member Statuses Installation Instructions What You Get Get started That's cool.  What's behind the curtain? How it Works New Campaign Created Editing a Campaign Type Member Status Removing a Campaign Type Member Status FAQ Do you have any suggested statuses? Why Don't you just prevent people from messing around with Protected Statuses? I get Apex test errors after deploying the code. How can I fix them? Pushing Code to a Sandbox Installing into a Scratch Org A solution for Protected Campaign Member Statuses and step-by-step instructions for use. Originally written by Adam Erstelle We go through all the effort of setting up beautiful Salesforce Campaigns, naming standards and maybe even a hierarchy. The next challenge in completing your beautiful work of campaign art is getting a hold on your Campaign Member Statuses for each campaign. When a new Salesforce Campaign is created, many people aren't just happy with the two default statuses of Sent and Responded. This prompts them to create what they think makes the most sense. Though as time goes on and as reporting starts to be needed, everyone making their own Campaign Member Statuses can be a nightmare that prevents you from getting meaningful and actionable intelligence. It would be really nice to take the guesswork out of status reporting and have a standard set of Campaign Member Statuses everyone uses consistently. Jenna Molby posted a fantastic solution  that enables you to automatically create the right Statuses on Campaign creation. The automation here is good, though as you increase the number of Types the Flow could become a bit unwieldy. Another thing that could be a problem comes later when other people might make changes to your carefully crafted structure. What happens if someone edits or even removes these statuses? This code was developed for Marketing Admins who want to automate and enforce the Campaign Member Status options for Campaigns of certain types. It was originally written by Sercante LLC(https://github.com/sercante-llc/campaign-member-status ). Protected Campaign Member Statuses Protected Campaign Member Statuses is a solution to solve this problem of automating(and enforcing) Campaign Member Statuses by Type. It allows you to: Define the Campaign Member Statuses that should always be present on given Campaign Types. Restore the Protected Statuses on Active Campaigns should someone make changes. Create additional Statuses for specific reasons. Override by authorized users on a per-Campaign basis. Installation Instructions Pushing Code to a Sandbox Installing into a Scratch Org What You Get When deploying this package to your org, you will get: 1 Custom Metadata Type(and page layout) 1 Campaign Custom Field 1 ChangeDataCapture configuration 2 Apex Triggers 5 Production Apex Classes 3 Apex Test Classes Get started Once installed, you need to define your Protected Statuses. This is done with Custom Metadata Types. Login to Salesforce Lightning, and go to Setup. Navigate to Custom Metadata Types, and click Manage Records for Protected Campaign Status. To create your first ones, click New Fill in the various fields. Label : Used in the List of Campaign Statuses in the Setup view in step 3 above. Recommended convention:Â  TYPE-STATUS Name : This is an API name that can be used by developers. Not required by this package. Recommended: let this autofill after you type in the Label. Campaign Type : This is the actual value for the Campaign's Type field. Protected Status : This is the Status value that will become protected. Is Default : Select this if this Status should be the default(please pick only 1 per Type). Is Responded : Select this if this Status should be marked as Responded. When complete, your screen may look something like this: Click Save (or Save & New ) and repeat a whole bunch. Lastly, time to set up a scheduled job to restore deleted protected statuses. Back in Setup, go to Apex Classes and click Schedule Apex . Fill in the few fields. Job Name : give this a nice descriptive name so you remember what it is in 3 months. Apex Class : CampaignMemberStatusJob Frequency : set this to what works for you. We recommend running this daily during off-peak hours. Start : today End : some time in the distant future Preferred Start Time : off peak hours When complete, your screen may look something like this: You are good to go once you have provided your statuses. Give it a whirl by creating a new Campaign with the Type you have set up. Then take a look at the statuses already created. Campaigns with Types not already set up will keep the default two statuses that Salesforce creates. That's cool.  What's behind the curtain? To accomplish this, we leverage a few cool tools available to us: Custom Metadata Types: Allows the Protected Statuses to be treated like normal Salesforce metadata and can be deployed around like any other metadata(changesets, insert devops tool here) Campaign Custom Field: Campaign.Has_Protected_Campaign_Member_Statuses__c  is automatically checked by the solution if a Campaign is created and there are Custom Metadata Type records that specify this Campaign's Type. It is also what allows the rest of the code to keep the statuses intact. You can clear the checkbox for this field to make changes to the statuses if you need to. However, you can't enable protection afterwards. Change Data Capture: We turn this on for CampaignMemberStatus so we can detect edits to statuses and then fix the records after-the-fact. Sadly we can't(yet?) put any triggers on CampaignMemberStatus(which would have been ideal). Triggers: We use them to kick off the automation that we've built when a Campaign is created. We also use them to watch for Campaign Member Status edits(through the ChangeEvents from Change Data Capture) so we can set things right afterwardsd. If you want even more details, check out the original Github project  where you can see all the inner workings of what is going on. How it Works Once everything is set up, Campaigns should maintain a consistent set of Campaign Member Statuses. Here's how we accomplish that. New Campaign Created When a new Campaign is created, we check to see if the Type of Campaign is defined in any of the Protected Campaign Member Status records(the Custom Metadata Type that was set up earlier). If there is a match, the solution will: Automatically add a checkbox to the Campaign Custom Field \"Has Campaign Type Member Statuses\". Automatically adjust the CampaignMemberStatus records to match all Protected Campaign Member Statuses expected Editing a Campaign Type Member Status For a Campaign that \"Has Campaign Type Member Statuses\", when one of the CampaignMemberStatus records is edited we will double check all statuses of that Campaign to make sure that all Protected ones still exist. If there are any missing, they will be recreated almost instantly(you may need to refresh the page for them to show up if there's a delay). Removing a Campaign Type Member Status If a user removes a Campaign Type Member Status, the Scheduled Job(that was created as part of Post-Install Configuration ) will search for Campaigns missing a Status and recreate it. FAQ Do you have any suggested statuses? Of course! Here are a few to get your creative juices flowing. Why Don't you just prevent people from messing around with Protected Statuses? We really wish we could. A \"before update\" and \"before delete\" Apex Trigger would be the simplest way to handle this. Unfortunately, Apex Triggers are not(yet) possible on CampaignMemberStatus records, so we end up having to fix it after-the-fact. I get Apex test errors after deploying the code. How can I fix them? If you have Apex tests which set up a Campaign record as part of the test, the functionality in this package will get called and might blow up. This is because how Salesforce internally treats the automatic generation of Campaign Member Status records when a new Campaign is created(it's weird). You have 2 options: For the purpose of the test, disable this functionality. You can accomplish this by adding TriggerHandler.bypass('CampaignTriggerHandler  in your Apex Test set up. To actually see the records that Salesforce would create, you would need to have your test @isTest(seeAllData=true) . There are a lot of considerations with this approach, so please use wisely. Pushing Code to a Sandbox Follow this set of instructions if you want to deploy the solution into your org without using an Unlocked Package. This will require a Sandbox, and then a ChangeSet to deploy into Production. If you know about and use git , clone this repository git clone https://github.com/dschach/campaign-member-status.git cd campaign-member-status Setup your environment Install Salesforce CLI or install from npm npm install @salesforce/cli --global Authorize your Salesforce org and provide it with an alias(myorg  in the commands below) # Connect your project to a Sandbox Org sf org login web --set-default --alias myorg --instance-url https://test.salesforce.com # if you need to specify a specific URL, use this slightly altered command, making the correct adjustments sf org login web --set-default --alias myorg --instance-url https://mucustomdomain.my.salesforce.com Run a series of commands to deploy each of the three parts, or skip to the next item to push them all at once Please install the Trigger Handler from the triggerHandler  directory or from its original repository . Documentation for that is found in that repo's pages: https://dschach.github.io/salesforce-trigger-framework . Or run this command in a terminal to deploy the required trigger handler sf project deploy start --source-dir triggerhandler --tracksource Run this command in a terminal to deploy the main code sf project deploy start --source-dir force-app --alias myorg Run this command in a terminal to deploy the bundled sample custom metadata sf project deploy start --source-dir unpackaged --alias myorg Or just run one command to push all three parts in sequence sf project deploy start You'll need a custom permission set to access the Campaign field, or just add it to an existing permission set and delete this one sf org assign permset --name Campaign_Type_Member_Status_Admin --target-org myorg Continue with Post-Install Configuration ) Installing into a Scratch Org Set up your environment. The steps include: Enable Dev Hub in your main org Install Salesforce CLI If you haven't already done so, authorize your hub org and provide it with an alias(myhuborg  in the command below): sf login org --set-default-dev-hub --alias myhuborg If you know about and use git , clone this repository git clone https://github.com/dschach/campaign-member-status.git cd campaign-member-status Run the included script to create a scratch org and push the metadata . scripts/campaignmember-scratchorg.sh Continue with Post-Install Configuration )"
    },
    {
        "title": "changes",
        "fileName": "changes.html",
        "text": "Changelog 1.2.0 (2023-04-26) Features triggerHandler:  Pass class name param(09eff4c ) triggerHandler:  Pass class name param(#44 )(bfdf0bd ) Miscellaneous Chores api:  Update to Spring '23 API 57.0(24ce8eb ) api:  Update to Spring '23 API 57.0(97dbc24 ) Continuous Integration Actions:  Rename GitHub actions(#63 )(12293b8 ) codecov:  Include token in action(198af8f ) Build System api:  Update project API to 57.0(92b6508 ) deps-dev:  Bump eslint from 8.34.0 to 8.35.0(8a51b58 ) deps-dev:  Bump eslint from 8.34.0 to 8.35.0(#45 )(fbbdd8b ) deps-dev:  Bump eslint from 8.35.0 to 8.36.0(#48 )(dc72aa4 ) deps-dev:  Bump eslint from 8.36.0 to 8.37.0(#54 )(14d98ab ) deps-dev:  Bump eslint from 8.37.0 to 8.38.0(#57 )(1c28fb8 ) deps-dev:  Bump eslint from 8.38.0 to 8.39.0(#58 )(645e816 ) deps-dev:  Bump eslint-config-prettier from 8.6.0 to 8.7.0(f73cb4f ) deps-dev:  Bump eslint-config-prettier from 8.6.0 to 8.7.0(#46 )(59e9208 ) deps-dev:  Bump eslint-config-prettier from 8.7.0 to 8.8.0(#50 )(23aa844 ) deps-dev:  Bump lint-staged from 13.1.2 to 13.2.0(#47 )(efc137e ) deps-dev:  Bump lint-staged from 13.2.0 to 13.2.1(#56 )(d1e54da ) deps-dev:  Bump marked from 4.2.12 to 4.3.0(#52 )(1bed2e1 ) deps-dev:  Bump prettier from 2.8.4 to 2.8.5(#49 )(d3d53c0 ) deps-dev:  Bump prettier from 2.8.5 to 2.8.6(#51 )(dc30872 ) deps-dev:  Bump prettier from 2.8.6 to 2.8.7(#53 )(daff212 ) deps-dev:  Bump prettier from 2.8.7 to 2.8.8(#60 )(c2f2b2b ) deps-dev:  Bump prettier-plugin-apex from 1.12.0 to 1.13.0(#59 )(2e79b1a ) deps:  Bump yaml from 2.2.1 to 2.2.2(#61 )(b8ac3c8 ) GitHub:  Update workflows(#62 )(e999d96 ) Remove Better-Align(deprecated)(e9c0092 ) sfdx:  Update cli commands to sf(#64 )(3dc233c ) Documentation ApexDox:  Update ApexDox(243e28c ) Codecov badge(71a8a47 ) Update ApexDox(#65 )(8aa3553 ) 1.1.0 (2023-02-22) Features Errors to Custom Labels(21116cc ) perf:  Remove extra debug statements for performance(21116cc ) release-please:  Configure Release-Please(#39 )(6c65f47 ) Unpackaged Email list view(f143317 ) Bug Fixes ApexDox icon assets(2252477 ) ApexDox icon assets(e7f7de5 ) ApexDox icons(2252477 ) ApexDox icons(daf0b4a ) Bump eslint from 8.33.0 to 8.34.0(04b2166 ) Custom label category typo(f143317 ) docs:  Readme and ApexDox(42e2ddc ) release-please:  Single directory(top level)(c2a7dc2 ) release-please:  Update config(0bc480f ) Code Refactoring Move errors to custom labels(0b08f93 ) Run updateHighlight less often(9fb8352 ) Setup scripts, husky(d8e6ea5 ) Miscellaneous Chores Add all changelog sections(53f3346 ) main:  Release cm-status 1.0.0(#31 )(05631ae ) style:  Run prettier(2ee551e ) Continuous Integration Add sections to changelog(97d8ca7 ) Change dependabot bumps to build type(2fb2b4c ) ci:  Cease using Prettier Apex local(991d99f ) Create codeowners file(edbfc92 ) GitHub PR workflow try docker(4ae23e4 ) Hide chore section in release notes(854b383 ) pmd:  Latest PMD in GitHub actions - no updatePMD needed(35a67f6 ) tests:  Apex test output to codecov(35a67f6 ) Build System ApexDox:  Use new index.js(4c91542 ) Bootstrap releases for path: .(07b7902 ) Bump lint-staged from 13.1.1 to 13.1.2(#36 )(6e0532b ) dependabot:  Dependabot commit prefixes(737774f ) dependabot:  Dependabot commit prefixes(396056e ) dependabot:  Include scope(b5e7a5d ) Project name in sfdx-project(1538f35 ) Release-please specify showing sections(ab27b4d ) release-please:  Run r-p on every push(f672ccc ) Documentation ApexDox:  Include changelog(a970d15 ) ApexDox:  TriggerHandler docs group content(#37 )(ef8478a ) 1.0.0(2023-02-21) Features best practices(#29 )(ca47e02 ) build:  Dependabot, project file updates(ca47e02 ) build:  scripts cleanup(ca47e02 ) Custom labels(c8f2ce5 ) docs:  Highlight 11.7(ca47e02 ) Errors to Custom Labels(21116cc ) perf:  Remove extra debug statements for performance(21116cc ) profile to permission set(c8f2ce5 ) release-please:  configure Release-Please(#39 )(6c65f47 ) Unpackaged Email list view(f143317 ) Bug Fixes ApexDox icon assets(2252477 ) ApexDox icons(2252477 ) Custom label category typo(f143317 ) dependabot prefix(7eab95a ) docs:  Readme and ApexDox(42e2ddc ) fill out release-please config(dbb7e31 ) husky pre-commit(ae4f842 ) prerelease version bumps(71c8ef4 ) release-please:  single directory(top level)(c2a7dc2 ) still in prerelease(dbb7e31 ) stop committing everything via husky(34c3fed ) Miscellaneous Chores release 0.1.0(ec8779a ) Code Refactoring move Apex tests to directory(c8f2ce5 ) Move errors to custom labels(0b08f93 ) run updateHighlight less often(9fb8352 ) setup scripts, husky(d8e6ea5 ) Build System bootstrap releases for path: .(07b7902 ) Bump eslint from 8.30.0 to 8.33.0(#22 )(18ec6b6 ) Bump eslint-config-prettier from 8.5.0 to 8.6.0(#16 )(926e179 ) Bump husky from 8.0.2 to 8.0.3(#15 )(46177c0 ) bump lint-staged from 13.1.1 to 13.1.2(#36 )(6e0532b ) Bump marked from 4.2.4 to 4.2.12(#19 )(c8137c3 ) Bump @sideway/formula from 3.0.0 to 3.0.1(#23 )(d9ae44f ) bump eslint from 8.33.0 to 8.34.0(04b2166 ) bump eslint-plugin-import from 2.26.0 to 2.27.5(#26 )(96a2a01 ) Bump json5 from 1.0.1 to 1.0.2(#18 )(a84ad42 ) bump lint-staged from 13.1.0 to 13.1.1(#27 )(c043b59 ) dependabot, project file updates(8a6f3cc ) dependabot:  Dependabot commit prefixes(737774f ) dependabot:  Dependabot commit prefixes(396056e ) release-please specify showing sections(ab27b4d ) scripts cleanup(db9d477 ) Documentation ApexDox:  ApexDox updates(68b1038 ) ApexDox:  TriggerHandler docs group content(#37 )(ef8478a ) ApexDox:  highlight 11.7(d361bac ) Continuous Integration Add sections to changelog(97d8ca7 ) Change dependabot bumps to build type(2fb2b4c ) Cease using Prettier Apex local(991d99f ) GitHub PR workflow try docker(4ae23e4 ) Hide chore section in release notes(854b383 ) 1.0.0 (2023-02-10) Features best practices(#29 )(ca47e02 ) build:  Dependabot, project file updates(ca47e02 ) build:  scripts cleanup(ca47e02 ) docs:  Highlight 11.7(ca47e02 ) Miscellaneous Chores release 1.0.0(39333d5 ) 0.1.0(2023-02-10) Bug Fixes Bump @sideway/formula from 3.0.0 to 3.0.1(#23 )(d9ae44f ) bump eslint-plugin-import from 2.26.0 to 2.27.5(#26 )(96a2a01 ) Bump json5 from 1.0.1 to 1.0.2(#18 )(a84ad42 ) bump lint-staged from 13.1.0 to 13.1.1(#27 )(c043b59 ) dependabot prefix(7eab95a ) fill out release-please config(dbb7e31 ) fill out release-please config(56f8a26 ) prerelease version bumps(71c8ef4 ) still in prerelease(dbb7e31 ) still in prerelease(c1087b2 ) stop committing everything via husky(34c3fed ) Miscellaneous Chores release 0.1.0(ec8779a )"
    },
    {
        "title": "CampaignMemberRepository",
        "fileName": "CampaignMemberRepository.html",
        "text": "CampaignMemberRepository Utility class to return statuses by Campaign Type Signature public without sharing virtual class CampaignMemberRepository Author Sercante LLC Since 2022 CampaignMemberRepository Methods getGroupedProtectedStatuses() Return Campaign Type Member Status  CMDT records by Campaign Type getGroupedProtectedStatuses() Return Campaign Type Member Status  CMDT records by Campaign Type Signature public virtual Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses() Returns Map<String, List<Campaign_Type_Member_Status__mdt>>"
    },
    {
        "title": "CampaignMemberService",
        "fileName": "CampaignMemberService.html",
        "text": "CampaignMemberService Some reusable logic for this solution(singleton pattern) Signature public virtual without sharing class CampaignMemberService Author Sercante LLC Since 2022 CampaignMemberService Properties Name Signature Annotations instance private static CampaignMemberService instance @TestVisible repo private CampaignMemberRepository repo @TestVisible CampaignMemberService Methods enforceProtectedStatusesForCampaigns(campaignIds) Insert/Update CM Status records as needed getCampaignsNeedingToBeFixed() TODO: This method needs to be fixed to remove query from loop getCampaignsWithMemberStatuses(campaignIds) Given a set of Campaign IDs, query the member status records for those Campaigns getGroupedProtectedStatuses() Get the CM Statuses for each Type getInstance() Running getInstance in a static context instantiates this class and its repo enforceProtectedStatusesForCampaigns(campaignIds) Insert/Update CM Status records as needed Signature public virtual void enforceProtectedStatusesForCampaigns(Set<Id> campaignIds) Parameters campaignIds Type: Set<Id> Campaigns to check getCampaignsNeedingToBeFixed() TODO: This method needs to be fixed to remove query from loop Signature @SuppressWarnings('PMD') public virtual Set<Id> getCampaignsNeedingToBeFixed() Returns Set<Id>  Campaigns with statues not matching Protected count getCampaignsWithMemberStatuses(campaignIds) Given a set of Campaign IDs, query the member status records for those Campaigns Signature public List<Campaign> getCampaignsWithMemberStatuses(Set<Id> campaignIds) Parameters campaignIds Type: Set<Id> Query Campaign  records with child CampaignMemberStatus  records Returns List<Campaign>  Campaign  records with child CampaignMemberStatus  records getGroupedProtectedStatuses() Get the CM Statuses for each Type Signature public virtual Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses() Returns Map<String, List<Campaign_Type_Member_Status__mdt>> getInstance() Running getInstance in a static context instantiates this class and its repo Signature public static CampaignMemberService getInstance() Returns CampaignMemberService See CampaignMemberService.repo"
    },
    {
        "title": "CampaignMemberStatusEventHelper",
        "fileName": "CampaignMemberStatusEventHelper.html",
        "text": "CampaignMemberStatusEventHelper Trigger Helper class with a single method to fire after insert of CampaignMemberStatusChangeEvent Signature public without sharing class CampaignMemberStatusEventHelper Author Sercante LLC Since 2022 Author David Schach Since 2023 Helper class no longer dependent on specific handler framework CampaignMemberStatusEventHelper Properties Name Signature newRecords private List<CampaignMemberStatusChangeEvent> newRecords CampaignMemberStatusEventHelper Constructors CampaignMemberStatusEventHelper() Constructor for trigger handler CampaignMemberStatusEventHelper() Constructor for trigger handler Signature public CampaignMemberStatusEventHelper() Parameters handlerName Pass in the name of the handler for better performance CampaignMemberStatusEventHelper Methods run() Execute after inserting(creating) change event records run() Execute after inserting(creating) change event records Signature public void run()"
    },
    {
        "title": "CampaignMemberStatusJob",
        "fileName": "CampaignMemberStatusJob.html",
        "text": "CampaignMemberStatusJob Schedulable job to run daily to clean up Campaigns with bad member statuses Signature public class CampaignMemberStatusJob implements Schedulable Author Sercante LLC Since 2022 CampaignMemberStatusJob Properties Name Signature Description sut private CampaignMemberService sut Instantiate the CampaignMemberService  class using getInstance so we also instantiate its repo  variable CampaignMemberStatusJob Methods execute(sc) Execute the scheduled job execute(sc) Execute the scheduled job Signature public void execute(SchedulableContext sc) Parameters sc Type: SchedulableContext SchedulableContext  for running this job daily"
    },
    {
        "title": "CampaignTriggerHandler",
        "fileName": "CampaignTriggerHandler.html",
        "text": "CampaignTriggerHandler This class handles the automation required on Adding/Editing Campaign records Signature public without sharing class CampaignTriggerHandler extends TriggerHandler Author Sercante LLC Since 2022 Author David Schach Since 2022 CampaignTriggerHandler Properties Name Signature cmService private CampaignMemberService cmService newRecords private List<Campaign> newRecords newRecordsMap private Map<Id, Campaign> newRecordsMap oldRecords private List<Campaign> oldRecords oldRecordsMap private Map<Id, Campaign> oldRecordsMap CampaignTriggerHandler Constructors CampaignTriggerHandler(handlerName) Constructor for CampaignMemberTriggerHandler CampaignTriggerHandler(handlerName) Constructor for CampaignMemberTriggerHandler Signature public CampaignTriggerHandler(String handlerName) Parameters handlerName Type: String Pass in the name of the handler for better performance CampaignTriggerHandler Methods afterInsert() Set up our new Campaign with the correct Statuses beforeInsert() Make sure people aren't trying to mess with the value of our Custom Field beforeUpdate() Make sure people aren't messing with our Protect_Campaign_Member_Statuses__c  value. afterInsert() Set up our new Campaign with the correct Statuses Signature public override void afterInsert() beforeInsert() Make sure people aren't trying to mess with the value of our Custom Field Signature public override void beforeInsert() beforeUpdate() Make sure people aren't messing with our Protect_Campaign_Member_Statuses__c  value. Signature public override void beforeUpdate()"
    },
    {
        "title": "CampaignTriggerHelper",
        "fileName": "CampaignTriggerHelper.html",
        "text": "CampaignTriggerHelper This class handles the automation required on Adding/Editing Campaign records Signature public with sharing class CampaignTriggerHelper Author Sercante LLC Since 2022 Author David Schach Since 2022 2023 Helper class removes dependency on old required trigger handler CampaignTriggerHelper Properties Name Signature Description cmService private CampaignMemberService cmService Instantiate our central service class newRecords private List<Campaign> newRecords oldRecordsMap private Map<Id, Campaign> oldRecordsMap opType private System.TriggerOperation opType CampaignTriggerHelper Constructors CampaignTriggerHelper(newRecords, oldRecordsMap, triggerEvent) Constructor for CampaignMemberTriggerHelper CampaignTriggerHelper(newRecords, oldRecordsMap, triggerEvent) Constructor for CampaignMemberTriggerHelper Signature public CampaignTriggerHelper(List<Campaign> newRecords, Map<Id, Campaign> oldRecordsMap, System.TriggerOperation triggerEvent) Parameters newRecords Type: List<Campaign> Trigger.new oldRecordsMap Type: Map<Id, Campaign> Trigger.oldMap triggerEvent Type: System.TriggerOperation Trigger context(BEFORE_UPDATE, etc) CampaignTriggerHelper Methods afterInsert() Set up our new Campaign with the correct Statuses beforeInsert() Make sure people aren't trying to mess with the value of our Custom Field beforeUpdate() Make sure people aren't messing with our Protect_Campaign_Member_Statuses__c  value. run() Central method that determines context and runs the appropraite method afterInsert() Set up our new Campaign with the correct Statuses Signature public void afterInsert() beforeInsert() Make sure people aren't trying to mess with the value of our Custom Field Signature public void beforeInsert() beforeUpdate() Make sure people aren't messing with our Protect_Campaign_Member_Statuses__c  value. Signature public void beforeUpdate() run() Central method that determines context and runs the appropraite method Signature public void run()"
    },
    {
        "title": "CampaignMemberRepositoryMocks",
        "fileName": "CampaignMemberRepositoryMocks.html",
        "text": "CampaignMemberRepositoryMocks Mock classes for responses to be used across multiple Apex tests Signature @isTest public without sharing class CampaignMemberRepositoryMocks Author Sercante LLC Since 2022 CampaignMemberRepositoryMocks.AdvertisementMock Mock class for Advertisement Campaign Type Member Status Value(only one status) Signature public class AdvertisementMock extends CampaignMemberRepository CampaignMemberRepositoryMocks.AdvertisementMock Methods getGroupedProtectedStatuses() getGroupedProtectedStatuses() Signature public override Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses() CampaignMemberRepositoryMocks.WebinarMock Mock class for Campaign Type Member Status values for Webinar Campaign Type Signature public class WebinarMock extends CampaignMemberRepository CampaignMemberRepositoryMocks.WebinarMock Methods getGroupedProtectedStatuses() getGroupedProtectedStatuses() Signature public override Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses()"
    },
    {
        "title": "CampaignMemberServiceTest",
        "fileName": "CampaignMemberServiceTest.html",
        "text": "CampaignMemberServiceTest Test class Signature @isTest private class CampaignMemberServiceTest Author Sercante LLC Since 2022 CampaignMemberServiceTest Methods shouldEnforceProtectedStatusesForCampaign() shouldEnforceProtectedStatusesForCampaign() Signature @isTest(seeAllData=true) static void shouldEnforceProtectedStatusesForCampaign()"
    },
    {
        "title": "CampaignMemberStatusJobTest",
        "fileName": "CampaignMemberStatusJobTest.html",
        "text": "CampaignMemberStatusJobTest Signature @isTest private class CampaignMemberStatusJobTest Author Sercante LLC Since 2022 CampaignMemberStatusJobTest Properties Name Signature executed public static Boolean executed gotProtectedStatuses public static Boolean gotProtectedStatuses CampaignMemberStatusJobTest Methods shouldWork() shouldWork() Signature @isTest static void shouldWork() CampaignMemberStatusJobTest.MockService Signature private class MockService extends CampaignMemberService CampaignMemberStatusJobTest.MockService Methods enforceProtectedStatusesForCampaigns(campaignIds) getCampaignsNeedingToBeFixed() enforceProtectedStatusesForCampaigns(campaignIds) Signature public override void enforceProtectedStatusesForCampaigns(Set<Id> campaignIds) getCampaignsNeedingToBeFixed() Signature public override Set<Id> getCampaignsNeedingToBeFixed()"
    },
    {
        "title": "CampaignTriggerTest",
        "fileName": "CampaignTriggerTest.html",
        "text": "CampaignTriggerTest Signature @isTest private class CampaignTriggerTest Author Sercante LLC Since 2022 CampaignTriggerTest Methods shouldAlowNewCampaignWithoutProtectedType() shouldCreateAllTheRightStatusesForSpecifiedType() shouldCreateAllTheRightStatusesInSingleStatusType() shouldCreateStatusesForClonedCampaign() shouldMakeCampaignProtectedIfItHasTheRightType() shouldPreventChangingTypeForCampaignMember() shouldPreventEnablingProtectedStatusAfterTheFact() shouldPreventUsersFromMakingCampaignProtected() shouldAlowNewCampaignWithoutProtectedType() Signature @isTest static void shouldAlowNewCampaignWithoutProtectedType() shouldCreateAllTheRightStatusesForSpecifiedType() Signature @isTest(seeAllData=true) static void shouldCreateAllTheRightStatusesForSpecifiedType() shouldCreateAllTheRightStatusesInSingleStatusType() Signature @isTest(seeAllData=true) static void shouldCreateAllTheRightStatusesInSingleStatusType() shouldCreateStatusesForClonedCampaign() Signature @isTest(seeAllData=true) static void shouldCreateStatusesForClonedCampaign() shouldMakeCampaignProtectedIfItHasTheRightType() Signature @isTest(seeAllData=true) static void shouldMakeCampaignProtectedIfItHasTheRightType() shouldPreventChangingTypeForCampaignMember() Signature @isTest(seeAllData=true) static void shouldPreventChangingTypeForCampaignMember() shouldPreventEnablingProtectedStatusAfterTheFact() Signature @isTest(seeAllData=true) static void shouldPreventEnablingProtectedStatusAfterTheFact() shouldPreventUsersFromMakingCampaignProtected() Signature @isTest static void shouldPreventUsersFromMakingCampaignProtected()"
    }
];
