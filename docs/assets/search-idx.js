export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Campaign Type Member Statuses This Unlocked Package was developed for Marketing Admins who want to enforce the Campaign Member Status options for Campaigns of certain types. It was originally written by Sercante LLC(https://github.com/sercante-llc/campaign-member-status ). This application is designed to run on the Salesforce Platform Table of contents Campaign Type Member Statuses Table of contents What You Get Pushing Code to a Sandbox Post-Install Configuration Installing into a Scratch Org How it Works New Campaign Created Editing a Campaign Type Member Status Removing a Campaign Type Member Status FAQ Why Don't you just prevent people from messing around with Protected Statuses? I get Apex test errors after deploying the code. How can I fix them? What You Get When deploying this package to your org, you will get: 1 Custom Metadata Type(and page layout) 1 Campaign Custom Field 1 ChangeDataCapture configuration 2 Apex Triggers 5 Production Apex Classes 3 Apex Test Classes Pushing Code to a Sandbox Follow this set of instructions if you want to deploy the solution into your org without using an Unlocked Package. This will require a Sandbox, and then a ChangeSet to deploy into Production. If you know about and use git , clone this repository git clone https://github.com/dschach/campaign-member-status.git cd campaign-member-status or Download a zip file Extract the contents Navigate to the directory(sample commands below, though it may be different for you depending where you downlaod things) cd Downloads/campaign-member-status-main/campaign-member-status-main Verify you are in the same directory as the sfdx-project.json file # mac or Linux ls # windows dir Setup your environment Install Salesforce CLI Authorize your Salesforce org and provide it with an alias(myorg  in the commands below) # Connect SFDX to a Sandbox Org sfdx force:auth:web:login -s -a myorg -r https://test.salesforce.com # if for some reason you need to specify a specific URL, use this slightly altered command, making the correct adjustments sfdx force:auth:web:login -s -a myorg -r https://mycompanyloginurl.my.salesforce.com Run this command in a terminal to deploy the reports and dashboards sfdx force:source:deploy -p \"force-app/main/default\" -u myorg Continue with Post-Install Configuration Post-Install Configuration Once installed, create some Protected Statuses Log in to Salesforce Lightning, go to Setup Navigate to Custom Metadata Types, click Manage Records for Campaign Type Member Status To create your first ones, click New Fill in the various fields Label: Used in the List of Campaign Statuses in the Setup view in step 3 above. Recommended convention: TYPE-STATUS Name: This is an API name that can be used by developers. Not required by this package. Recommended: let this autofill after you type in the Label Campaign Type: This is the actual value for the Campaign's Type field. Protected Status: This is the Status value that will become protected Is Default: Select this if this Status should be the default(please pick only 1 per Type) Is Responded: Select this if this Status should be marked as Responded Click Save(or Save & New) and repeat a whole bunch Create a scheduled job to restore deleted protected statuses Back in Setup, go to Apex Classes and click Schedule Apex Fill in the few fields Job Name: give this a nice descriptive name so you remember what it is in 3 months Apex Class: CampaignMemberStatusJob Frequency: set this to what works for you. We recommend running this daily during off-peak hours Start: today End: some time in the distant future Preferred Start Time: off peak hours Once you have provided your statuses, you are good to go. Give it a whirl by creating a new Campaign with the Type that you have set up. Then take a look at the Statuses already created. Installing into a Scratch Org Set up your environment. The steps include: Enable Dev Hub in your org Install Salesforce CLI If you haven't already done so, authorize your hub org and provide it with an alias(myhuborg  in the command below): sfdx force:auth:web:login -d -a myhuborg If you know about and use git , clone this repository git clone https://github.com/dschach/campaign-member-status.git cd campaign-member-status or Download a zip file Extract the contents Navigate to the directory(sample commands below, though it may be different for you depending where you downlaod things) cd Downloads/campaign-member-status-main/campaign-member-status-main Verify you are in the same directory as the sfdx-project.json file # mac or Linux ls # windows dir Run the included script to create a scratch org and push the metadata . scripts/scratchorg.sh Continue with Post-Install Configuration How it Works Once everything is set up(above), Campaigns should maintain a consistent set of Campaign Member Statuses. Here's how we accomplish that. New Campaign Created When a new Campaign is created, we check to see if the Type of Campaign is defined in any of the Protected Campaign Member Status records(the Custom Metadata Type that was set up earlier). If there is a match, the solution will: Automatically add a checkbox to the Campaign Custom Field \"Has Campaign Type Member Statuses\". Automatically adjust the CampaignMemberStatus records to match all Protected Campaign Member Statuses expected Editing a Campaign Type Member Status For a Campaign that \"Has Campaign Type Member Statuses\", when one of the CampaignMemberStatus records is edited we will double check all statuses of that Campaign to make sure that all Protected ones still exist. If there are any missing, they will be recreated almost instantly(you may need to refresh the page for them to show up if there's a delay). Removing a Campaign Type Member Status If a user removes a Campaign Type Member Status, the Scheduled Job(that was created as part of Post-Install Configuration ) will search for Campaigns missing a Status and recreate it. FAQ Why Don't you just prevent people from messing around with Protected Statuses? We really wish we could. A \"before update\" and \"before delete\" Apex Trigger would be the simplest way to handle this. Unfortunately, Apex Triggers are not(yet) possible on CampaignMemberStatus records, so we end up having to fix it after-the-fact. I get Apex test errors after deploying the code. How can I fix them? If you have Apex tests which set up a Campaign record as part of the test, the functionality in this package will get called and might blow up. This is because how Salesforce internally treats the automatic generation of Campaign Member Status records when a new Campaign is created(it's weird). You have 2 options: For the purpose of the test, disable this functionality. You can accomplish this by adding CampaignTriggerHandler.bypass=true;  in your Apex Test set up. To actually see the records that Salesforce would create, you would need to have your test @isTest(seeAllData=true) . There are a lot of considerations with this approach, so please use wisely."
    },
    {
        "title": "campaignmemberstatushome",
        "fileName": "campaignmemberstatushome.html",
        "text": "CampaignMemberStatus A solution for Protected Campaign Member Statuses and step-by-step instructions for use. We go through all the effort of setting up beautiful Salesforce Campaigns, naming standards and maybe even a hierarchy. The next challenge in completing your beautiful work of campaign art is getting a hold on your Campaign Member Statuses for each campaign. When a new Salesforce Campaign is created, many people aren’t just happy with the two default statuses of Sent and Responded. This prompts them to create what they think makes the most sense. Though as time goes on and as reporting starts to be needed, everyone making their own Campaign Member Statuses can be a nightmare that prevents you from getting meaningful and actionable intelligence. It would be really nice to take the guesswork out of status reporting and have a standard set of Campaign Member Statuses everyone uses consistently. Jenna Molby posted a fantastic solution that enables you to automatically create the right Statuses on Campaign creation. The automation here is good, though as you increase the number of Types the Flow could become a bit unwieldy. Another thing that could be a problem comes later when other people might make changes to your carefully crafted structure. What happens if someone edits or even removes these statuses? Protected Campaign Member Statuses Protected Campaign Member Statuses is a solution to solve this problem. It allows you to: Define the Campaign Member Statuses that should always be present on given Campaign Types. Restore the Protected Statuses on Active Campaigns should someone make changes. Create additional Statuses for specific reasons. Override by authorized users on a per-Campaign basis. Get started Once installed, you need to define your Protected Statuses. This is done with Custom Metadata Types. Login to Salesforce Lightning, and go to Setup. Navigate to Custom Metadata Types, and click Manage Records for Protected Campaign Status. To create your first ones, click New Fill in the various fields. Label: Used in the List of Campaign Statuses in the Setup view in step 3 above. Recommended convention:  TYPE-STATUS Name: This is an API name that can be used by developers. Not required by this package. Recommended: let this autofill after you type in the Label. Campaign Type: This is the actual value for the Campaign’s Type field. Protected Status: This is the Status value that will become protected. Is Default: Select this if this Status should be the default(please pick only 1 per Type). Is Responded: Select this if this Status should be marked as Responded. When complete, your screen may look something like this: Click Save(or Save & New) and repeat a whole bunch. Lastly, time to set up a scheduled job to restore deleted protected statuses. Back in Setup, go to Apex Classes and click Schedule Apex. Fill in the few fields. Job Name: give this a nice descriptive name so you remember what it is in 3 months. Apex Class: CampaignMemberStatusJob Frequency: set this to what works for you. We recommend running this daily during off-peak hours. Start: today End: some time in the distant future Preferred Start Time: off peak hours When complete, your screen may look something like this: You are good to go once you have provided your statuses. Give it a whirl by creating a new Campaign with the Type you have set up. Then take a look at the statuses already created. Campaigns with Types not already set up will keep the default two statuses that Salesforce creates. That’s cool.  What’s behind the curtain? To accomplish this, we leverage a few cool tools available to us: Custom Metadata Types: Allows the Protected Statuses to be treated like normal Salesforce metadata and can be deployed around like any other metadata(changesets, insert devops tool here) Campaign Custom Field: Has_Protected_Campaign_Member_Statuses__c is automatically checked by the solution if a Campaign is created and there are Custom Metadata Type records that specify this Campaign’s Type. It is also what allows the rest of the code to keep the statuses intact. You can clear the checkbox for this field to make changes to the statuses if you need to. However, you can’t enable protection afterwards. Change Data Capture: We turn this on for CampaignMemberStatus so we can detect edits to statuses and then fix the records after-the-fact. Sadly we can’t(yet?) put any triggers on CampaignMemberStatus(which would have been ideal). Triggers: We use them to kick off the automation that we’ve built when a Campaign is created. We also use them to watch for Campaign Member Status edits(through the ChangeEvents from Change Data Capture) so we can set things right afterwardsd. If you want even more details, check out the original Github project where you can see all the inner workings of what is going on."
    },
    {
        "title": "CampaignMemberRepository",
        "fileName": "CampaignMemberRepository.html",
        "text": "CampaignMemberRepository Utility class to return statuses by Campaign Type Signature public without sharing virtual class CampaignMemberRepository Sercante LLC2022 CampaignMemberRepository Methods getGroupedProtectedStatuses() Return Campaign Type Member Status  CMDT records by Campaign Type getGroupedProtectedStatuses() Return Campaign Type Member Status  CMDT records by Campaign Type Signature public virtual Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses() Returns Map<String, List<Campaign_Type_Member_Status__mdt>>"
    },
    {
        "title": "CampaignMemberService",
        "fileName": "CampaignMemberService.html",
        "text": "CampaignMemberService Some reusable logic for this solution(singleton pattern) Signature public virtual without sharing class CampaignMemberService Sercante LLC2022 CampaignMemberService Properties Name Signature Annotations instance private static CampaignMemberService instance @TestVisible repo private CampaignMemberRepository repo @TestVisible CampaignMemberService Methods enforceProtectedStatusesForCampaigns(campaignIds) getCampaignsNeedingToBeFixed() TODO: This method needs to be fixed to remove query from loop getCampaignsWithMemberStatuses(campaignIds) getGroupedProtectedStatuses() getInstance() Running getInstance in a static context instantiates this class and its repo enforceProtectedStatusesForCampaigns(campaignIds) Signature public virtual void enforceProtectedStatusesForCampaigns(Set<Id> campaignIds) getCampaignsNeedingToBeFixed() TODO: This method needs to be fixed to remove query from loop Signature @SuppressWarnings('PMD') public virtual Set<Id> getCampaignsNeedingToBeFixed() Returns Set<Id>  Campaigns with statues not matching Protected count getCampaignsWithMemberStatuses(campaignIds) Signature public List<Campaign> getCampaignsWithMemberStatuses(Set<Id> campaignIds) getGroupedProtectedStatuses() Signature public virtual Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses() getInstance() Running getInstance in a static context instantiates this class and its repo Signature public static CampaignMemberService getInstance() Returns CampaignMemberService See CampaignMemberService.repo"
    },
    {
        "title": "CampaignMemberServiceTest",
        "fileName": "CampaignMemberServiceTest.html",
        "text": "CampaignMemberServiceTest Signature @isTest private class CampaignMemberServiceTest Sercante LLC2022 CampaignMemberServiceTest Methods shouldEnforceProtectedStatusesForCampaign() shouldEnforceProtectedStatusesForCampaign() Signature @isTest(seeAllData=true) static void shouldEnforceProtectedStatusesForCampaign() CampaignMemberServiceTest.WebinarMock Signature private class WebinarMock extends CampaignMemberRepository CampaignMemberServiceTest.WebinarMock Methods getGroupedProtectedStatuses() getGroupedProtectedStatuses() Signature public override Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses()"
    },
    {
        "title": "CampaignMemberStatusEventTriggerHandler",
        "fileName": "CampaignMemberStatusEventTriggerHandler.html",
        "text": "CampaignMemberStatusEventTriggerHandler Signature public without sharing class CampaignMemberStatusEventTriggerHandler Sercante LLC2022 CampaignMemberStatusEventTriggerHandler Properties Name Signature instance private static CampaignMemberStatusEventTriggerHandler instance CampaignMemberStatusEventTriggerHandler Methods afterInsert(events) getInstance() afterInsert(events) Signature public void afterInsert(List<CampaignMemberStatusChangeEvent> events) getInstance() Signature public static CampaignMemberStatusEventTriggerHandler getInstance()"
    },
    {
        "title": "CampaignMemberStatusJob",
        "fileName": "CampaignMemberStatusJob.html",
        "text": "CampaignMemberStatusJob Signature public class CampaignMemberStatusJob implements Schedulable Sercante LLC2022 CampaignMemberStatusJob Properties Name Signature sut private CampaignMemberService sut CampaignMemberStatusJob Methods execute(sc) execute(sc) Signature public void execute(SchedulableContext sc)"
    },
    {
        "title": "CampaignMemberStatusJobTest",
        "fileName": "CampaignMemberStatusJobTest.html",
        "text": "CampaignMemberStatusJobTest Signature @isTest private class CampaignMemberStatusJobTest Sercante LLC2022 CampaignMemberStatusJobTest Properties Name Signature executed public static Boolean executed gotProtectedStatuses public static Boolean gotProtectedStatuses CampaignMemberStatusJobTest Methods shouldWork() shouldWork() Signature @isTest static void shouldWork() CampaignMemberStatusJobTest.MockService Signature private class MockService extends CampaignMemberService CampaignMemberStatusJobTest.MockService Methods enforceProtectedStatusesForCampaigns(campaignIds) getCampaignsNeedingToBeFixed() enforceProtectedStatusesForCampaigns(campaignIds) Signature public override void enforceProtectedStatusesForCampaigns(Set<Id> campaignIds) getCampaignsNeedingToBeFixed() Signature public override Set<Id> getCampaignsNeedingToBeFixed()"
    },
    {
        "title": "CampaignTriggerHandler",
        "fileName": "CampaignTriggerHandler.html",
        "text": "CampaignTriggerHandler This class handles the automation required on Adding/Editing Campaign records Signature public without sharing class CampaignTriggerHandler Sercante LLC2022 CampaignTriggerHandler Properties Name Signature Annotations bypass public static Boolean bypass cmService private CampaignMemberService cmService instance private static CampaignTriggerHandler instance @TestVisible CampaignTriggerHandler Constructors CampaignTriggerHandler() Default constructor. Runs getInstance of CampaignMemberService CampaignTriggerHandler(service) Constructor that takes CampaignMemberService  object Never called - should be deleted CampaignTriggerHandler() Default constructor. Runs getInstance of CampaignMemberService Signature public CampaignTriggerHandler() See CampaignMemberService.getInstance CampaignTriggerHandler(service) Constructor that takes CampaignMemberService  object Never called - should be deleted Signature public CampaignTriggerHandler(CampaignMemberService service) Parameters service Type: CampaignMemberService Pass in CampaignMemberService  when running this trigger handler CampaignTriggerHandler Methods getInstance() onAfterInsert(campaigns) Let's actually go ahead and set up our new Campaign with the correct Statuses onBeforeInsert(campaigns) Make sure people aren't trying to mess with the value of our Custom Field onBeforeUpdate(newRecords, oldRecordsMap) Make sure people aren't messing with our Protect_Campaign_Member_Statuses__c value. getInstance() Signature public static CampaignTriggerHandler getInstance() onAfterInsert(campaigns) Let's actually go ahead and set up our new Campaign with the correct Statuses Signature public void onAfterInsert(List<Campaign> campaigns) onBeforeInsert(campaigns) Make sure people aren't trying to mess with the value of our Custom Field Signature public void onBeforeInsert(List<Campaign> campaigns) onBeforeUpdate(newRecords, oldRecordsMap) Make sure people aren't messing with our Protect_Campaign_Member_Statuses__c value. Signature public void onBeforeUpdate(List<Campaign> newRecords, Map<Id, Campaign> oldRecordsMap)"
    },
    {
        "title": "CampaignTriggerTest",
        "fileName": "CampaignTriggerTest.html",
        "text": "CampaignTriggerTest Signature @isTest private class CampaignTriggerTest Sercante LLC2022 CampaignTriggerTest Methods shouldAlowNewCampaignWithoutProtectedType() shouldCreateAllTheRightStatusesForSpecifiedType() shouldCreateAllTheRightStatusesInSingleStatusType() shouldCreateStatusesForClonedCampaign() shouldMakeCampaignProtectedIfItHasTheRightType() shouldPreventChangingTypeForCampaignMember() shouldPreventEnablingProtectedStatusAfterTheFact() shouldPreventUsersFromMakingCampaignProtected() shouldAlowNewCampaignWithoutProtectedType() Signature @isTest static void shouldAlowNewCampaignWithoutProtectedType() shouldCreateAllTheRightStatusesForSpecifiedType() Signature @isTest(seeAllData=true) static void shouldCreateAllTheRightStatusesForSpecifiedType() shouldCreateAllTheRightStatusesInSingleStatusType() Signature @isTest(seeAllData=true) static void shouldCreateAllTheRightStatusesInSingleStatusType() shouldCreateStatusesForClonedCampaign() Signature @isTest(seeAllData=true) static void shouldCreateStatusesForClonedCampaign() shouldMakeCampaignProtectedIfItHasTheRightType() Signature @isTest(seeAllData=true) static void shouldMakeCampaignProtectedIfItHasTheRightType() shouldPreventChangingTypeForCampaignMember() Signature @isTest(seeAllData=true) static void shouldPreventChangingTypeForCampaignMember() shouldPreventEnablingProtectedStatusAfterTheFact() Signature @isTest(seeAllData=true) static void shouldPreventEnablingProtectedStatusAfterTheFact() shouldPreventUsersFromMakingCampaignProtected() Signature @isTest static void shouldPreventUsersFromMakingCampaignProtected() CampaignTriggerTest.AdvertisementMock Signature private class AdvertisementMock extends CampaignMemberRepository CampaignTriggerTest.AdvertisementMock Methods getGroupedProtectedStatuses() getGroupedProtectedStatuses() Signature public override Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses() CampaignTriggerTest.WebinarMock Signature private class WebinarMock extends CampaignMemberRepository CampaignTriggerTest.WebinarMock Methods getGroupedProtectedStatuses() getGroupedProtectedStatuses() Signature public override Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses()"
    }
];
