export default [
    {
        "title": "Home",
        "fileName": "index.html",
        "text": "Home Campaign Type Member Statuses This code was developed for Marketing Admins who want to automate and enforce the Campaign Member Status options for Campaigns of certain types. It was originally written by Sercante LLC . This application is designed to run on the Salesforce Platform Campaign Type Member Statuses A solution for Protected Campaign Member Statuses and step-by-step instructions for use. Originally written by Adam Erstelle Protected Campaign Member Statuses Installation Instructions What You Get Get started That's cool.  What's behind the curtain? How it Works New Campaign Created Editing a Campaign Type Member Status Removing a Campaign Type Member Status FAQ Do you have any suggested statuses? Why Don't you just prevent people from messing around with Protected Statuses? I get Apex test errors after deploying the code. How can I fix them? Pushing Code to a Sandbox Installing into a Scratch Org A solution for Protected Campaign Member Statuses and step-by-step instructions for use. Originally written by Adam Erstelle We go through all the effort of setting up beautiful Salesforce Campaigns, naming standards and maybe even a hierarchy. The next challenge in completing your beautiful work of campaign art is getting a hold on your Campaign Member Statuses for each campaign. When a new Salesforce Campaign is created, many people aren't just happy with the two default statuses of Sent and Responded. This prompts them to create what they think makes the most sense. Though as time goes on and as reporting starts to be needed, everyone making their own Campaign Member Statuses can be a nightmare that prevents you from getting meaningful and actionable intelligence. It would be really nice to take the guesswork out of status reporting and have a standard set of Campaign Member Statuses everyone uses consistently. Jenna Molby posted a fantastic solution  that enables you to automatically create the right Statuses on Campaign creation. The automation here is good, though as you increase the number of Types the Flow could become a bit unwieldy. Another thing that could be a problem comes later when other people might make changes to your carefully crafted structure. What happens if someone edits or even removes these statuses? This code was developed for Marketing Admins who want to automate and enforce the Campaign Member Status options for Campaigns of certain types. It was originally written by Sercante LLC(https://github.com/sercante-llc/campaign-member-status ). Protected Campaign Member Statuses Protected Campaign Member Statuses is a solution to solve this problem of automating(and enforcing) Campaign Member Statuses by Type. It allows you to: Define the Campaign Member Statuses that should always be present on given Campaign Types. Restore the Protected Statuses on Active Campaigns should someone make changes. Create additional Statuses for specific reasons. Override by authorized users on a per-Campaign basis. Installation Instructions Pushing Code to a Sandbox Installing into a Scratch Org What You Get When deploying this package to your org, you will get: 1 Custom Metadata Type(and page layout) 1 Campaign Custom Field 1 ChangeDataCapture configuration 2 Apex Triggers 5 Production Apex Classes 3 Apex Test Classes Get started Once installed, you need to define your Protected Statuses. This is done with Custom Metadata Types. Login to Salesforce Lightning, and go to Setup. Navigate to Custom Metadata Types, and click Manage Records for Protected Campaign Status. To create your first ones, click New Fill in the various fields. Label : Used in the List of Campaign Statuses in the Setup view in step 3 above. Recommended convention:Â  TYPE-STATUS Name : This is an API name that can be used by developers. Not required by this package. Recommended: let this autofill after you type in the Label. Campaign Type : This is the actual value for the Campaign's Type field. Protected Status : This is the Status value that will become protected. Is Default : Select this if this Status should be the default(please pick only 1 per Type). Is Responded : Select this if this Status should be marked as Responded. When complete, your screen may look something like this: Click Save (or Save & New ) and repeat a whole bunch. Lastly, time to set up a scheduled job to restore deleted protected statuses. Back in Setup, go to Apex Classes and click Schedule Apex . Fill in the few fields. Job Name : give this a nice descriptive name so you remember what it is in 3 months. Apex Class : CampaignMemberStatusJob Frequency : set this to what works for you. We recommend running this daily during off-peak hours. Start : today End : some time in the distant future Preferred Start Time : off peak hours When complete, your screen may look something like this: You are good to go once you have provided your statuses. Give it a whirl by creating a new Campaign with the Type you have set up. Then take a look at the statuses already created. Campaigns with Types not already set up will keep the default two statuses that Salesforce creates. That's cool.  What's behind the curtain? To accomplish this, we leverage a few cool tools available to us: Custom Metadata Types: Allows the Protected Statuses to be treated like normal Salesforce metadata and can be deployed around like any other metadata(changesets, insert devops tool here) Campaign Custom Field: Campaign.Has_Protected_Campaign_Member_Statuses__c  is automatically checked by the solution if a Campaign is created and there are Custom Metadata Type records that specify this Campaign's Type. It is also what allows the rest of the code to keep the statuses intact. You can clear the checkbox for this field to make changes to the statuses if you need to. However, you can't enable protection afterwards. Change Data Capture: We turn this on for CampaignMemberStatus so we can detect edits to statuses and then fix the records after-the-fact. Sadly we can't(yet?) put any triggers on CampaignMemberStatus(which would have been ideal). Triggers: We use them to kick off the automation that we've built when a Campaign is created. We also use them to watch for Campaign Member Status edits(through the ChangeEvents from Change Data Capture) so we can set things right afterwardsd. If you want even more details, check out the original Github project  where you can see all the inner workings of what is going on. How it Works Once everything is set up, Campaigns should maintain a consistent set of Campaign Member Statuses. Here's how we accomplish that. New Campaign Created When a new Campaign is created, we check to see if the Type of Campaign is defined in any of the Protected Campaign Member Status records(the Custom Metadata Type that was set up earlier). If there is a match, the solution will: Automatically add a checkbox to the Campaign Custom Field \"Has Campaign Type Member Statuses\". Automatically adjust the CampaignMemberStatus records to match all Protected Campaign Member Statuses expected Editing a Campaign Type Member Status For a Campaign that \"Has Campaign Type Member Statuses\", when one of the CampaignMemberStatus records is edited we will double check all statuses of that Campaign to make sure that all Protected ones still exist. If there are any missing, they will be recreated almost instantly(you may need to refresh the page for them to show up if there's a delay). Removing a Campaign Type Member Status If a user removes a Campaign Type Member Status, the Scheduled Job(that was created as part of Post-Install Configuration ) will search for Campaigns missing a Status and recreate it. FAQ Do you have any suggested statuses? Of course! Here are a few to get your creative juices flowing. Why Don't you just prevent people from messing around with Protected Statuses? We really wish we could. A \"before update\" and \"before delete\" Apex Trigger would be the simplest way to handle this. Unfortunately, Apex Triggers are not(yet) possible on CampaignMemberStatus records, so we end up having to fix it after-the-fact. I get Apex test errors after deploying the code. How can I fix them? If you have Apex tests which set up a Campaign record as part of the test, the functionality in this package will get called and might blow up. This is because how Salesforce internally treats the automatic generation of Campaign Member Status records when a new Campaign is created(it's weird). You have 2 options: For the purpose of the test, disable this functionality. You can accomplish this by adding TriggerHandler.bypass('CampaignTriggerHandler  in your Apex Test set up. To actually see the records that Salesforce would create, you would need to have your test @isTest(seeAllData=true) . There are a lot of considerations with this approach, so please use wisely. Pushing Code to a Sandbox Follow this set of instructions if you want to deploy the solution into your org without using an Unlocked Package. This will require a Sandbox, and then a ChangeSet to deploy into Production. If you know about and use git , clone this repository git clone https://github.com/dschach/campaign-member-status.git cd campaign-member-status Setup your environment Install Salesforce CLI or install from npm npm install --global sfdx-cli npm install @salesforce/cli --global Authorize your Salesforce org and provide it with an alias(myorg  in the commands below) # Connect your project to a Sandbox Org sf org login web --set-default --alias myorg --instance-url https://test.salesforce.com # if you need to specify a specific URL, use this slightly altered command, making the correct adjustments sf org login web --set-default --alias myorg --instance-url https://mucustomdomain.my.salesforce.com Run a series of commands to deploy each of the three parts, or skip to the next item to push them all at once Please install the Trigger Handler from the triggerHandler  directory or from its original repository . Documentation for that is found in that repo's pages: https://dschach.github.io/salesforce-trigger-framework . Or run this command in a terminal to deploy the required trigger handler sf project deploy start --source-dir triggerhandler --tracksource Run this command in a terminal to deploy the main code sf project deploy start --source-dir force-app --alias myorg Run this command in a terminal to deploy the bundled sample custom metadata sf project deploy start --source-dir unpackaged --alias myorg Or just run one command to push all three parts in sequence sf project deploy start You'll need a custom permission set to access the Campaign field, or just add it to an existing permission set and delete this one sf org assign permset --name Campaign_Type_Member_Status_Admin --target-org myorg Continue with Post-Install Configuration ) Installing into a Scratch Org Set up your environment. The steps include: Enable Dev Hub in your main org Install Salesforce CLI If you haven't already done so, authorize your hub org and provide it with an alias(myhuborg  in the command below): sf login org --set-default-dev-hub --alias myhuborg If you know about and use git , clone this repository git clone https://github.com/dschach/campaign-member-status.git cd campaign-member-status Run the included script to create a scratch org and push the metadata . scripts/campaignmember-scratchorg.sh Continue with Post-Install Configuration )"
    },
    {
        "title": "triggerhandlerdocs",
        "fileName": "triggerhandlerdocs.html",
        "text": "Trigger Handler Framework Trigger Handler For details on the trigger handler required for this project, see https://dschach.github.io/salesforce-trigger-framework/ ."
    },
    {
        "title": "CampaignMemberRepository",
        "fileName": "CampaignMemberRepository.html",
        "text": "CampaignMemberRepository Utility class to return statuses by Campaign Type Signature public without sharing virtual class CampaignMemberRepository Author Sercante LLC Since 2022 CampaignMemberRepository Methods getGroupedProtectedStatuses() Return Campaign Type Member Status  CMDT records by Campaign Type getGroupedProtectedStatuses() Return Campaign Type Member Status  CMDT records by Campaign Type Signature public virtual Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses() Returns Map<String, List<Campaign_Type_Member_Status__mdt>>"
    },
    {
        "title": "CampaignMemberService",
        "fileName": "CampaignMemberService.html",
        "text": "CampaignMemberService Some reusable logic for this solution(singleton pattern) Signature public virtual without sharing class CampaignMemberService Author Sercante LLC Since 2022 CampaignMemberService Properties Name Signature Annotations instance private static CampaignMemberService instance @TestVisible repo private CampaignMemberRepository repo @TestVisible CampaignMemberService Methods enforceProtectedStatusesForCampaigns(campaignIds) Insert/Update CM Status records as needed getCampaignsNeedingToBeFixed() TODO: This method needs to be fixed to remove query from loop getCampaignsWithMemberStatuses(campaignIds) Given a set of Campaign IDs, query the member status records for those Campaigns getGroupedProtectedStatuses() Get the CM Statuses for each Type getInstance() Running getInstance in a static context instantiates this class and its repo enforceProtectedStatusesForCampaigns(campaignIds) Insert/Update CM Status records as needed Signature public virtual void enforceProtectedStatusesForCampaigns(Set<Id> campaignIds) Parameters campaignIds Type: Set<Id> Campaigns to check getCampaignsNeedingToBeFixed() TODO: This method needs to be fixed to remove query from loop Signature @SuppressWarnings('PMD') public virtual Set<Id> getCampaignsNeedingToBeFixed() Returns Set<Id>  Campaigns with statues not matching Protected count getCampaignsWithMemberStatuses(campaignIds) Given a set of Campaign IDs, query the member status records for those Campaigns Signature public List<Campaign> getCampaignsWithMemberStatuses(Set<Id> campaignIds) Parameters campaignIds Type: Set<Id> Query Campaign  records with child CampaignMemberStatus  records Returns List<Campaign>  Campaign  records with child CampaignMemberStatus  records getGroupedProtectedStatuses() Get the CM Statuses for each Type Signature public virtual Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses() Returns Map<String, List<Campaign_Type_Member_Status__mdt>> getInstance() Running getInstance in a static context instantiates this class and its repo Signature public static CampaignMemberService getInstance() Returns CampaignMemberService See CampaignMemberService.repo"
    },
    {
        "title": "CampaignMemberStatusEventTriggerHandler",
        "fileName": "CampaignMemberStatusEventTriggerHandler.html",
        "text": "CampaignMemberStatusEventTriggerHandler Signature public without sharing class CampaignMemberStatusEventTriggerHandler extends TriggerHandler Author Sercante LLC Since 2022 CampaignMemberStatusEventTriggerHandler Properties Name Signature newRecords private List<CampaignMemberStatusChangeEvent> newRecords CampaignMemberStatusEventTriggerHandler Constructors CampaignMemberStatusEventTriggerHandler(handlerName) Constructor for trigger handler CampaignMemberStatusEventTriggerHandler(handlerName) Constructor for trigger handler Signature public CampaignMemberStatusEventTriggerHandler(String handlerName) Parameters handlerName Type: String Pass in the name of the handler for better performance CampaignMemberStatusEventTriggerHandler Methods afterInsert() Execute after inserting(creating) change event records afterInsert() Execute after inserting(creating) change event records Signature public override void afterInsert()"
    },
    {
        "title": "CampaignMemberStatusJob",
        "fileName": "CampaignMemberStatusJob.html",
        "text": "CampaignMemberStatusJob Schedulable job to run daily to clean up Campaigns with bad member statuses Signature public class CampaignMemberStatusJob implements Schedulable Author Sercante LLC Since 2022 CampaignMemberStatusJob Properties Name Signature Description sut private CampaignMemberService sut Instantiate the CampaignMemberService  class using getInstance so we also instantiate its repo  variable CampaignMemberStatusJob Methods execute(sc) Execute the scheduled job execute(sc) Execute the scheduled job Signature public void execute(SchedulableContext sc) Parameters sc Type: SchedulableContext SchedulableContext  for running this job daily"
    },
    {
        "title": "CampaignTriggerHandler",
        "fileName": "CampaignTriggerHandler.html",
        "text": "CampaignTriggerHandler This class handles the automation required on Adding/Editing Campaign records Signature public without sharing class CampaignTriggerHandler extends TriggerHandler Author Sercante LLC Since 2022 Author David Schach Since 2022 CampaignTriggerHandler Properties Name Signature cmService private CampaignMemberService cmService newRecords private List<Campaign> newRecords newRecordsMap private Map<Id, Campaign> newRecordsMap oldRecords private List<Campaign> oldRecords oldRecordsMap private Map<Id, Campaign> oldRecordsMap CampaignTriggerHandler Constructors CampaignTriggerHandler(handlerName) Constructor for CampaignMemberTriggerHandler CampaignTriggerHandler(handlerName) Constructor for CampaignMemberTriggerHandler Signature public CampaignTriggerHandler(String handlerName) Parameters handlerName Type: String Pass in the name of the handler for better performance CampaignTriggerHandler Methods afterInsert() Set up our new Campaign with the correct Statuses beforeInsert() Make sure people aren't trying to mess with the value of our Custom Field beforeUpdate() Make sure people aren't messing with our Protect_Campaign_Member_Statuses__c  value. afterInsert() Set up our new Campaign with the correct Statuses Signature public override void afterInsert() beforeInsert() Make sure people aren't trying to mess with the value of our Custom Field Signature public override void beforeInsert() beforeUpdate() Make sure people aren't messing with our Protect_Campaign_Member_Statuses__c  value. Signature public override void beforeUpdate()"
    },
    {
        "title": "CampaignMemberRepositoryMocks",
        "fileName": "CampaignMemberRepositoryMocks.html",
        "text": "CampaignMemberRepositoryMocks Mock classes for responses to be used across multiple Apex tests Signature @isTest public without sharing class CampaignMemberRepositoryMocks Author Sercante LLC Since 2022 CampaignMemberRepositoryMocks.AdvertisementMock Mock class for Advertisement Campaign Type Member Status Value(only one status) Signature public class AdvertisementMock extends CampaignMemberRepository CampaignMemberRepositoryMocks.AdvertisementMock Methods getGroupedProtectedStatuses() getGroupedProtectedStatuses() Signature public override Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses() CampaignMemberRepositoryMocks.WebinarMock Mock class for Campaign Type Member Status values for Webinar Campaign Type Signature public class WebinarMock extends CampaignMemberRepository CampaignMemberRepositoryMocks.WebinarMock Methods getGroupedProtectedStatuses() getGroupedProtectedStatuses() Signature public override Map<String, List<Campaign_Type_Member_Status__mdt>> getGroupedProtectedStatuses()"
    },
    {
        "title": "CampaignMemberServiceTest",
        "fileName": "CampaignMemberServiceTest.html",
        "text": "CampaignMemberServiceTest Test class Signature @isTest private class CampaignMemberServiceTest Author Sercante LLC Since 2022 CampaignMemberServiceTest Methods shouldEnforceProtectedStatusesForCampaign() shouldEnforceProtectedStatusesForCampaign() Signature @isTest(seeAllData=true) static void shouldEnforceProtectedStatusesForCampaign()"
    },
    {
        "title": "CampaignMemberStatusJobTest",
        "fileName": "CampaignMemberStatusJobTest.html",
        "text": "CampaignMemberStatusJobTest Signature @isTest private class CampaignMemberStatusJobTest Author Sercante LLC Since 2022 CampaignMemberStatusJobTest Properties Name Signature executed public static Boolean executed gotProtectedStatuses public static Boolean gotProtectedStatuses CampaignMemberStatusJobTest Methods shouldWork() shouldWork() Signature @isTest static void shouldWork() CampaignMemberStatusJobTest.MockService Signature private class MockService extends CampaignMemberService CampaignMemberStatusJobTest.MockService Methods enforceProtectedStatusesForCampaigns(campaignIds) getCampaignsNeedingToBeFixed() enforceProtectedStatusesForCampaigns(campaignIds) Signature public override void enforceProtectedStatusesForCampaigns(Set<Id> campaignIds) getCampaignsNeedingToBeFixed() Signature public override Set<Id> getCampaignsNeedingToBeFixed()"
    },
    {
        "title": "CampaignTriggerTest",
        "fileName": "CampaignTriggerTest.html",
        "text": "CampaignTriggerTest Signature @isTest private class CampaignTriggerTest Author Sercante LLC Since 2022 CampaignTriggerTest Methods shouldAlowNewCampaignWithoutProtectedType() shouldCreateAllTheRightStatusesForSpecifiedType() shouldCreateAllTheRightStatusesInSingleStatusType() shouldCreateStatusesForClonedCampaign() shouldMakeCampaignProtectedIfItHasTheRightType() shouldPreventChangingTypeForCampaignMember() shouldPreventEnablingProtectedStatusAfterTheFact() shouldPreventUsersFromMakingCampaignProtected() shouldAlowNewCampaignWithoutProtectedType() Signature @isTest static void shouldAlowNewCampaignWithoutProtectedType() shouldCreateAllTheRightStatusesForSpecifiedType() Signature @isTest(seeAllData=true) static void shouldCreateAllTheRightStatusesForSpecifiedType() shouldCreateAllTheRightStatusesInSingleStatusType() Signature @isTest(seeAllData=true) static void shouldCreateAllTheRightStatusesInSingleStatusType() shouldCreateStatusesForClonedCampaign() Signature @isTest(seeAllData=true) static void shouldCreateStatusesForClonedCampaign() shouldMakeCampaignProtectedIfItHasTheRightType() Signature @isTest(seeAllData=true) static void shouldMakeCampaignProtectedIfItHasTheRightType() shouldPreventChangingTypeForCampaignMember() Signature @isTest(seeAllData=true) static void shouldPreventChangingTypeForCampaignMember() shouldPreventEnablingProtectedStatusAfterTheFact() Signature @isTest(seeAllData=true) static void shouldPreventEnablingProtectedStatusAfterTheFact() shouldPreventUsersFromMakingCampaignProtected() Signature @isTest static void shouldPreventUsersFromMakingCampaignProtected()"
    },
    {
        "title": "TriggerHandler",
        "fileName": "TriggerHandler.html",
        "text": "TriggerHandler Trigger Handler virtual class as base for all trigger handlers Signature public virtual class TriggerHandler See License , GitHub , TriggerHandlerTest Author Kevin OHara Since 2013 Author David Schach Since 2021 TriggerHandler Properties Name Signature Annotations Description BYPASS_ALL_ALIAS private static final String BYPASS_ALL_ALIAS @TestVisible This is the value that will be in the returned list or set when global bypass is active bypassedHandlers private static Set<String> bypassedHandlers @TestVisible All bypassed handlers ERROR_TRIGGERCONTEXT private static final String ERROR_TRIGGERCONTEXT @TestVisible Error text - assumes English for debug logs globalBypass private static Boolean globalBypass @TestVisible true  if we bypass all triggers without checking the contents of bypassedHandlers handlerName private String handlerName The name of this handler. Set by getHandlerName() isTriggerExecuting private Boolean isTriggerExecuting @TestVisible Is this class executing in trigger context? loopCountMap private static Map<String, LoopCount> loopCountMap @TestVisible Map of handlerName  => times run()  was invoked showDebug private static Boolean showDebug @TestVisible true  if we include a debug statement for trigger entry and exit showLimits private static Boolean showLimits @TestVisible true  if we include a debug statement for limits triggerEvent private System.TriggerOperation triggerEvent @TestVisible The current triggerEvent of the trigger, overridable in tests TriggerHandler Constructors TriggerHandler() Basic constructor. Slower than the other one TriggerHandler(handlerName) Constructor with handler name to improve performance TriggerHandler() Basic constructor. Slower than the other one Signature public TriggerHandler() See TriggerHandler.TriggerHandler Example new AccountSampleTriggerHandler().run(); TriggerHandler(handlerName) Constructor with handler name to improve performance Signature public TriggerHandler(String handlerName) Parameters handlerName Type: String The name of the handler Author David Schach Since 2021 Example new AccountSampleTriggerHandler('AccountSampleTriggerHandler').run(); //(in Trigger Handler) public AccountSampleTriggerHandler(String className) { this.newRecords =(List<Account>) Trigger.new; this.oldRecords =(List<Account>) Trigger.old; this.newRecordsMap =(Map<Id, Account>) Trigger.newMap; this.oldRecordsMap =(Map<Id, Account>) Trigger.oldMap; } TriggerHandler Methods bypass(handlerName) Bypass by string bypass(handlerType) Bypass by type/class. This is probably best for avoiding typos. bypass(handlerNames) Bypass by list, e.g. TriggerHandler.bypass(listOfHandlerStrings) bypassAll() Bypass all handlers(clear bypassedHandlers to prevent confusion) bypassList() Return a list of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience bypassSet() Return a Set of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience clearAllBypasses() Clear all bypasses - by clearing the global bypass and by clearing the list of bypassed handlers clearBypass(handlerName) Bypass a specific handler by name clearBypass(handlerType) Bypass a specific handler by type clearBypass(handlerNames) Bypass a list of handlers clearBypassList() Clear the entire bypass list, but keep the global bypass flag intact This is useful for resetting the list of handlers to bypass while maintaining global bypassing clearGlobalBypass() Clear only the global bypass flag, leaving the list of bypassed handlers intact This is useful for keeping a base set of bypassed handlers intact for an entire operation clearMaxLoopCount() Removes the limit for the number of times we allow this class to run getHandlerName() Get the name of the current handler. This can be set by using the constructor with the string parameter to improve performance getLoopCount(handlerName) return the current loop count incrementCheckLoopCount() Increment the loop count and check if we exceeded the max loop count. Silently exit if we have exceeded it.(Log to System.debug) isBypassed(handlerName) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed isBypassed(handlerType) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed run() Main method that will be called during execution See the sample trigger for the best way to set up your handler setBypass(handlerName, desiredValue) Set bypass status to a specific value. Eliminates the need to know the current bypass status setMaxLoopCount(max) Limit the number of times this handler can be run before it fails silently setTriggerContext() Base method called by constructor to set the current context setTriggerContext(opType, testMode) Set the current trigger context based on the System.TriggerOperation If we are not in a trigger context, then we set isTriggerExecuting to false showDebug() Called in the trigger to force the class to debug trigger entry and exit with context. showDebug(enabled) Called in the trigger to force the class to debug trigger entry and exit with context. Set to true to show entry and exit. showLimits() Called before the trigger to force the class to debug query limits when it runs showLimits(enabled) Called before the trigger to enable the class to debug(or not) query limits when it runs. Set to true to show limits. validateRun() Make sure this trigger should continue to run Returning false  causes trigger handler to exit bypass(handlerName) Bypass by string Signature public static void bypass(String handlerName) Parameters handlerName Type: String Name of the handler to be bypassed Example TriggerHandler.bypass('AccountSampleTriggerHandler') bypass(handlerType) Bypass by type/class. This is probably best for avoiding typos. Signature public static void bypass(Type handlerType) Parameters handlerType Type: Type The Class to be bypassed. Must end with \".class\" Author vr8hub Example TriggerHandler.bypass(AccountTriggerHandler.class); bypass(handlerNames) Bypass by list, e.g. TriggerHandler.bypass(listOfHandlerStrings) Signature public static void bypass(List<String> handlerNames) Parameters handlerNames Type: List<String> List of handlernames bypassAll() Bypass all handlers(clear bypassedHandlers to prevent confusion) Signature public static void bypassAll() Example TriggerHandler.bypassAll(); bypassList() Return a list of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience Signature public static List<String> bypassList() Returns List<String>  List of bypassed handlers Example TriggerHandler.bypassList(); bypassSet() Return a Set of the bypassed handlers Though both Set and List allow contains(value), we include both methods for convenience Signature public static Set<String> bypassSet() Returns Set<String>  Set of bypassed handlers Since 2022 Example if(TriggerHandler.bypassSet().contains('AccountSampleTriggerHandler'){ // do something } clearAllBypasses() Clear all bypasses - by clearing the global bypass and by clearing the list of bypassed handlers Signature public static void clearAllBypasses() Example TriggerHandler.clearAllBypasses(); clearBypass(handlerName) Bypass a specific handler by name Signature public static void clearBypass(String handlerName) Parameters handlerName Type: String The class name to be bypassed Author vr8hub Example TriggerHandler.clearBypass('AccountSampleTriggerHandler') clearBypass(handlerType) Bypass a specific handler by type Signature public static void clearBypass(Type handlerType) Parameters handlerType Type: Type The class to be bypassed. Must end with \".class\" Example TriggerHandler.clearBypass(AccountSampleTriggerHandler.class) clearBypass(handlerNames) Bypass a list of handlers Signature public static void clearBypass(List<String> handlerNames) Parameters handlerNames Type: List<String> List of Strings of handlers to bypass Example List<String> classList = ['AccountTriggerHandler','ContactTriggerHandler']; TriggerHandler.clearBypass(classList); clearBypassList() Clear the entire bypass list, but keep the global bypass flag intact This is useful for resetting the list of handlers to bypass while maintaining global bypassing Signature public static void clearBypassList() Example TriggerHandler.clearBypassList(); clearGlobalBypass() Clear only the global bypass flag, leaving the list of bypassed handlers intact This is useful for keeping a base set of bypassed handlers intact for an entire operation Signature public static void clearGlobalBypass() Example TriggerHandler.clearGlobalBypass(); clearMaxLoopCount() Removes the limit for the number of times we allow this class to run Signature public void clearMaxLoopCount() getHandlerName() Get the name of the current handler. This can be set by using the constructor with the string parameter to improve performance Signature @TestVisible private String getHandlerName() Returns String  Name of the current handler See TriggerHandler.handlerName getLoopCount(handlerName) return the current loop count Signature public static Integer getLoopCount(String handlerName) Parameters handlerName Type: String The handler class to check for the current loop count Returns Integer  How many times has this handler run? incrementCheckLoopCount() Increment the loop count and check if we exceeded the max loop count. Silently exit if we have exceeded it.(Log to System.debug) Signature private Boolean incrementCheckLoopCount() Returns Boolean  Should the trigger continue execution? Authors David Schach , fbouzeraa isBypassed(handlerName) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed Signature public static Boolean isBypassed(String handlerName) Parameters handlerName Type: String The class name of the handler we are checking is bypassed Returns Boolean  Is this handler bypassed? Example TriggerHandler.isBypassed('AccountTriggerHandler'); isBypassed(handlerType) A handler is considered bypassed if it was bypassed, or all handlers have been bypassed Signature public static Boolean isBypassed(Type handlerType) Parameters handlerType Type: Type The handler class we are checking is bypassed Returns Boolean  Is this handler bypassed? Since 2021 Example TriggerHandler.isBypassed(AccountTriggerHandler.class); run() Main method that will be called during execution See the sample trigger for the best way to set up your handler Signature public void run() Authors Kevin OHara , David Schach Example new AccountSampleTriggerHandler().run(); setBypass(handlerName, desiredValue) Set bypass status to a specific value. Eliminates the need to know the current bypass status Signature public static void setBypass(String handlerName, Boolean desiredValue) Parameters handlerName Type: String The name of the TriggerHandler class desiredValue Type: Boolean true  to bypass, and false  to run the handler/clear the bypass Since 2021 Author David Schach Example TriggerHandler.setBypass('AccountTriggerHandler', false); -or- Boolean isBypassed = TriggerHandler.isBypassed('AccountTriggerHandler'); TriggerHandler.bypass('AccountTriggerHandler'); // do something here TriggerHandler.setBypass('AccountTriggerHandler', isBypassed); setMaxLoopCount(max) Limit the number of times this handler can be run before it fails silently Signature public void setMaxLoopCount(Integer max) Parameters max Type: Integer Naximum number of times Author David Schach Example TriggerHandler.setMaxLoopCount(5); setTriggerContext() Base method called by constructor to set the current context Signature @TestVisible private void setTriggerContext() setTriggerContext(opType, testMode) Set the current trigger context based on the System.TriggerOperation If we are not in a trigger context, then we set isTriggerExecuting to false Signature @TestVisible private void setTriggerContext(System.TriggerOperation opType, Boolean testMode) Parameters opType Type: System.TriggerOperation The operation type - set automatically by the system testMode Type: Boolean Only used in test methods to force certain contexts See TriggerHandler.isTriggerExecuting showDebug() Called in the trigger to force the class to debug trigger entry and exit with context. Signature public static void showDebug() See TriggerHandler.showLimits Author David Schach Since 2021 Example TriggerHandler.showDebug(); new AccountSampleTriggerHandler.run(); -or- AccountSampleTriggerHandler.showDebug(); showDebug(enabled) Called in the trigger to force the class to debug trigger entry and exit with context. Set to true to show entry and exit. Signature public static void showDebug(Boolean enabled) Parameters enabled Type: Boolean true to enable; false to disable See TriggerHandler.showDebug Author David Schach Since 2021 showLimits() Called before the trigger to force the class to debug query limits when it runs Signature public static void showLimits() See TriggerHandler.showLimits Example TriggerHandler.showLimits(); new AccountSampleTriggerHandler.run(); -or- AccountSampleTriggerHandler.showLimits(); showLimits(enabled) Called before the trigger to enable the class to debug(or not) query limits when it runs. Set to true to show limits. Signature public static void showLimits(Boolean enabled) Parameters enabled Type: Boolean true to enable; false to disable See TriggerHandler.showLimits validateRun() Make sure this trigger should continue to run Returning false  causes trigger handler to exit Signature @TestVisible private Boolean validateRun() Returns Boolean  Is the run valid? Exceptions TriggerHandlerException See TriggerHandler.TriggerHandlerException TriggerHandler.LoopCount Virtual method for the implementing class to override Signature @TestVisible private class LoopCount TriggerHandler.LoopCount Properties Name Signature Description count private Integer count Number of times this handler has been run max private Integer max Maximum number of times this handler should be run TriggerHandler.LoopCount Constructors LoopCount() Standard constructor Default max to 5 Default count to 0 LoopCount(max) Constructor with specified max loops LoopCount() Standard constructor Default max to 5 Default count to 0 Signature public LoopCount() LoopCount(max) Constructor with specified max loops Signature public LoopCount(Integer max) Parameters max Type: Integer Max number of loops allowed TriggerHandler.LoopCount Methods exceeded() Determines if we're about to exceed the loop count. getCount() Returns the current loop count. getMax() Returns the max loop count. increment() Increment the internal counter returning the results of this.exceeded(). setMax(max) Sets the max loop count exceeded() Determines if we're about to exceed the loop count. Signature public Boolean exceeded() Returns Boolean  True if less than 0 or more than max. getCount() Returns the current loop count. Signature public Integer getCount() Returns Integer  Current loop count. getMax() Returns the max loop count. Signature public Integer getMax() Returns Integer  Max loop count. increment() Increment the internal counter returning the results of this.exceeded(). Signature public Boolean increment() Returns Boolean  true if count will exceed max count or is less than 0. setMax(max) Sets the max loop count Signature public void setMax(Integer max) Parameters max Type: Integer The integer to set max to. TriggerHandler.TriggerHandlerException Exception class Signature public class TriggerHandlerException extends Exception"
    },
    {
        "title": "TriggerHandlerTest",
        "fileName": "TriggerHandlerTest.html",
        "text": "TriggerHandlerTest Test class for base TriggerHandler class Signature @isTest private class TriggerHandlerTest See GitHub , TriggerHandler Author Kevin OHara Since 2013 Author David Schach Since 2021 TriggerHandlerTest Properties Name Signature handler private static TriggerHandlerTest.TestHandler handler lastMethodCalled private static String lastMethodCalled TriggerHandlerTest Methods afterDeleteMode() afterInsertMode() afterUndeleteMode() afterUpdateMode() assertTestHandlerName() Ensure that the current handler name is as expected beforeDeleteMode() beforeInsertMode() beforeUpdateMode() resetTest() testAfterDelete() testAfterInsert() testAfterUndelete() testAfterUpdate() testBeforeDelete() testBeforeInsert() testBeforeInsertWithLimits() Test and show limits and debug testBeforeUpdate() testBypassAPI() test bypass api testBypassByType() Test bypass by Type testConstructorWithParameter() testConstructorWithParametersAndBypass() testLoopCount() instance method tests testLoopCountClass() testNonTriggerContext() testOutsideTrigger() call from outside trigger testVirtualMethods() test virtual methods afterDeleteMode() Signature private static void afterDeleteMode() afterInsertMode() Signature private static void afterInsertMode() afterUndeleteMode() Signature private static void afterUndeleteMode() afterUpdateMode() Signature private static void afterUpdateMode() assertTestHandlerName() Ensure that the current handler name is as expected Signature private static void assertTestHandlerName() beforeDeleteMode() Signature private static void beforeDeleteMode() beforeInsertMode() Signature private static void beforeInsertMode() beforeUpdateMode() Signature private static void beforeUpdateMode() resetTest() Signature private static void resetTest() testAfterDelete() Signature @isTest private static void testAfterDelete() testAfterInsert() Signature @isTest private static void testAfterInsert() testAfterUndelete() Signature @isTest private static void testAfterUndelete() testAfterUpdate() Signature @isTest private static void testAfterUpdate() testBeforeDelete() Signature @isTest private static void testBeforeDelete() testBeforeInsert() Signature @isTest private static void testBeforeInsert() testBeforeInsertWithLimits() Test and show limits and debug Signature @isTest private static void testBeforeInsertWithLimits() testBeforeUpdate() Signature @isTest private static void testBeforeUpdate() testBypassAPI() test bypass api Signature @isTest private static void testBypassAPI() testBypassByType() Test bypass by Type Signature @IsTest static void testBypassByType() testConstructorWithParameter() Signature @isTest private static void testConstructorWithParameter() testConstructorWithParametersAndBypass() Signature @isTest private static void testConstructorWithParametersAndBypass() testLoopCount() instance method tests Signature @isTest private static void testLoopCount() testLoopCountClass() Signature @isTest private static void testLoopCountClass() testNonTriggerContext() Signature @isTest private static void testNonTriggerContext() testOutsideTrigger() call from outside trigger Signature @isTest private static void testOutsideTrigger() testVirtualMethods() test virtual methods Signature @isTest private static void testVirtualMethods() TriggerHandlerTest.TestHandler test implementation of the TriggerHandler Signature private class TestHandler extends TriggerHandler TriggerHandlerTest.TestHandler Constructors TestHandler() Invoke constructor TestHandler(handlerName) Override the trigger handler constructor that takes the handler name as a parameter TestHandler() Invoke constructor Signature public TestHandler() TestHandler(handlerName) Override the trigger handler constructor that takes the handler name as a parameter Signature public TestHandler(String handlerName) Parameters handlerName Type: String The handler name to instantiate TriggerHandlerTest.TestHandler Methods afterDelete() afterInsert() afterUndelete() afterUpdate() beforeDelete() beforeInsert() beforeUpdate() afterDelete() Signature public override void afterDelete() afterInsert() Signature public override void afterInsert() afterUndelete() Signature public override void afterUndelete() afterUpdate() Signature public override void afterUpdate() beforeDelete() Signature public override void beforeDelete() beforeInsert() Signature public override void beforeInsert() beforeUpdate() Signature public override void beforeUpdate()"
    }
];
